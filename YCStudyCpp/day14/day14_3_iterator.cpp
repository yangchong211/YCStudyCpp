//
// Created by 杨充 on 2024/6/21.
//
#include <iostream>

using namespace std;

//14.1.1.1 什么是STL
void test14_1_1_1();
//14.1.1.2 STL的好处
void test14_1_1_2();
//14.1.1.3 STL重要组件
void test14_1_1_3();


int main() {
    test14_1_1_1();
    test14_1_1_2();
    test14_1_1_3();
    return 0;
}


//14.1.1.1 什么是STL
void test14_1_1_1() {
    //C++ 标准模板库（Standard Template Library，STL）是一套功能强大的 C++ 模板类和函数的集合，它提供了一系列通用的、可复用的算法和数据结构。
    //STL 的设计基于泛型编程，这意味着使用模板可以编写出独立于任何特定数据类型的代码。
    //STL 分为多个组件，包括容器（Containers）、迭代器（Iterators）、算法（Algorithms）、函数对象（Function Objects）和适配器（Adapters）等。


}


//14.1.1.2 STL的好处
void test14_1_1_2() {
    //使用 STL 的好处:
    //代码复用：STL 提供了大量的通用数据结构和算法，可以减少重复编写代码的工作。
    //性能优化：STL 中的算法和数据结构都经过了优化，以提供最佳的性能。
    //泛型编程：使用模板，STL 支持泛型编程，使得算法和数据结构可以适用于任何数据类型。
    //易于维护：STL 的设计使得代码更加模块化，易于阅读和维护。



}

//14.1.1.3 STL重要组件
void test14_1_1_3() {
    //容器（Containers）
    //容器是 STL 中最基本的组件之一，提供了各种数据结构，包括向量（vector）、链表（list）、队列（queue）、栈（stack）、集合（set）、映射（map）等。这些容器具有不同的特性和用途，可以根据实际需求选择合适的容器。
    //算法（Algorithms）	STL 提供了大量的算法，用于对容器中的元素进行各种操作，包括排序、搜索、复制、移动、变换等。这些算法在使用时不需要关心容器的具体类型，只需要指定要操作的范围即可。
    //迭代器（iterators）	迭代器用于遍历容器中的元素，允许以统一的方式访问容器中的元素，而不用关心容器的内部实现细节。STL 提供了多种类型的迭代器，包括随机访问迭代器、双向迭代器、前向迭代器和输入输出迭代器等。
    //函数对象（Function Objects）	函数对象是可以像函数一样调用的对象，可以用于算法中的各种操作。STL 提供了多种函数对象，包括一元函数对象、二元函数对象、谓词等，可以满足不同的需求。
    //适配器（Adapters）	适配器用于将一种容器或迭代器适配成另一种容器或迭代器，以满足特定的需求。STL 提供了多种适配器，包括栈适配器（stack adapter）、队列适配器（queue adapter）和优先队列适配器（priority queue adapter）等。


}









