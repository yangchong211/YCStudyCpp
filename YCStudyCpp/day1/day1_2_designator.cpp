//
// Created by 杨充 on 2024/6/13.
// 1.2 修饰符和标识符
//
#include <iostream>

using namespace std;

//1.2.1.1 什么是修饰符
void test1_2_1_1();
//1.2.1.2 const：用于声明常量
void test1_2_1_2();
//1.2.1.3 volatile：用于声明易变变量
void test1_2_1_3();
//1.2.1.4 signed 和 unsigned：用于整数类型
void test1_2_1_4();

//1.2.2.1 什么是标志符
void test1_2_2_1();
//1.2.2.2 有效标志符
void test1_2_2_2();
//1.2.2.3 无效标志符
void test1_2_2_3();



int main() {
    test1_2_1_1();
    test1_2_1_2();
    test1_2_1_3();
    test1_2_1_4();

    test1_2_2_1();
    test1_2_2_2();
    test1_2_2_3();
    return 0;
}

//1.2.1.1 什么是修饰符
void test1_2_1_1() {
    //在C++中，修饰符（modifiers）是用于修改基本数据类型的关键字。它们可以改变数据类型的行为、范围或存储方式。
    //
    //以下是一些常见的C++修饰符：
    //
    //const：用于声明常量，表示变量的值在初始化后不能被修改。
    //
    //volatile：用于声明易变变量，表示变量的值可能会在未知的时间被改变，通常用于多线程或硬件相关的编程。
    //
    //signed 和 unsigned：用于整数类型，指定变量是否可以表示负数。signed表示有符号整数，可以表示正数和负数，而unsigned表示无符号整数，只能表示非负数。
    //
    //short 和 long：用于整数类型，指定变量的范围。short表示短整数，通常占用较少的存储空间，而long表示长整数，通常占用更多的存储空间。
    //
    //static：用于变量和函数，表示变量在整个程序执行期间保持其值，函数在当前文件中可见。
    //
    //extern：用于变量和函数，表示变量或函数在其他文件中定义或声明。
    //
    //这些修饰符可以与基本数据类型（如int、float等）一起使用，以改变其行为或特性。修饰符可以单独使用，也可以组合使用，以满足特定的需求。
    //
    //需要注意的是，修饰符的使用应根据具体的需求和语义进行选择，以确保代码的正确性和可读性。
}

//以下是一些使用const关键字声明常量的示例：
const int MAX_VALUE = 100; // 声明一个整数常量
const float PI = 3.14159; // 声明一个浮点数常量
const char* MESSAGE = "Hello, World!"; // 声明一个字符串常量


//1.2.1.2 const：用于声明常量
void test1_2_1_2() {
    //在C++中，const是一个关键字，用于声明常量。通过使用const关键字，可以将变量标记为只读，即其值在初始化后不能被修改。
    const int LOCAL_CONSTANT = 42; // 声明一个局部常量

    //在上述示例中，const关键字用于声明常量。常量的命名通常使用大写字母，以便与变量区分。
    //常量可以是整数、浮点数、字符、字符串或其他数据类型。常量的值在初始化后不能被修改。

    //使用const关键字可以提高代码的可读性和安全性，防止意外的修改常量的值，并帮助编译器进行优化。
}


volatile int variable; // 声明一个易变变量

//1.2.1.3 volatile：用于声明易变变量
void test1_2_1_3() {
    //在C++中，volatile是一个关键字，用于声明易变变量。通过使用volatile关键字，可以告诉编译器该变量的值可能会在未知的时间被改变，从而防止编译器对该变量的优化。
    //volatile关键字通常用于多线程编程或与硬件相关的编程，以确保对变量的访问是准确和可预测的。它告诉编译器不要对该变量进行优化，以避免因为编译器的优化而导致的意外行为。

    volatile int localVariable; // 声明一个局部易变变量
    //在上述示例中，volatile关键字用于声明变量variable和localVariable为易变变量。这意味着编译器不会对这些变量的读取和写入进行优化，以确保对变量的访问是准确和可预测的。

    //volatile关键字通常用于以下情况：
    //多线程编程：当多个线程访问同一个变量时，使用volatile关键字可以确保对变量的读取和写入操作是原子的，避免出现意外的行为。
    //中断处理程序：在处理硬件中断时，使用volatile关键字可以确保对相关变量的访问是准确和可预测的，防止编译器对变量的优化。
}

//1.2.1.4 signed 和 unsigned：用于整数类型
void test1_2_1_4() {

}

//1.2.2.1 什么是标志符
void test1_2_2_1() {
    //C++ 标识符是用来标识变量、函数、类、模块，或任何其他用户自定义项目的名称。

    //变量、符号常量、函数、数组、类型、文件、标签和其他各种用户定义的对象的名称。
    // 第一个字符必须是字母或下划线
    // 后续字符可以是字母、数字或下划线
    // 标识符的有效长度不超过247字符
    // 标识符不能和关键字相同
    // 标识符区分大小写
    // 最好也不要和系统预定义标识符同名
    // 标识符命名要做到“见名知义”
    // 应该避免使用可能引起混淆的字母


    //一些问题思考，把遇到的问题思考分析一下
    //为什么要使用 using namespace std;
    //有些名字容易冲突，所以会使用命名空间的方式进行区分，具体来说就是加个前缀。比如 C++ 标准库里面定义了 vector 容器，你自己也写了个 vector 类，这样名字就冲突了。
    //于是标准库里的名字都加上 std:: 的前缀，你必须用 std::vector 来引用。同理，你自己的类也可以加个自定义的前缀。
}

//1.2.2.2 有效标志符
void test1_2_2_2() {
    //一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。
    //下面列出几个有效的标识符：
    //
    //mohd       zara    abc   move_name  a_123
    //myname50   _temp   j     a23b9      retVal
}

//1.2.2.3 无效标志符
void test1_2_2_3() {
    //C++ 标识符内不允许出现标点字符，比如 @、& 和 %。C++ 是区分大小写的编程语言。
}


